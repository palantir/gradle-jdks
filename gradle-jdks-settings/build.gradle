apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.external-publish-gradle-plugin'
apply plugin: 'com.palantir.shadow-jar'

dependencies {
    // DO NOT ADD directly implementation/api dependencies here. We need to avoid overlapping dependencies between the
    // settings classLoader and the build classLoaders.
    shadeTransitively project(':gradle-jdks-setup-common')
    shadeTransitively project(':gradle-jdks-enablement')
}

gradlePlugin {
    plugins {
        patchJdks {
            id = 'com.palantir.jdks.settings'
            displayName = 'Palantir Gradle JDK Settings Plugin'
            description = 'Sets the Gradle properties for the Gradle JDK setup'
            implementationClass = 'com.palantir.gradle.jdks.settings.ToolchainJdksSettingsPlugin'
            tags.addAll("java", "jdks")
        }
    }
    website = 'https://github.com/palantir/gradle-jdks'
    vcsUrl = 'https://github.com/palantir/gradle-jdks'
    description = 'Gradle JDK settings plugins'
}

// When adding the shadeTransitively dependency, the pom file includes `gradle-jdks-root` as a dependency.
// This is broken and it will lead to classpath configuration failures when the settings plugin is applied. As a
// workaround, we are removing the artifact from the pom file.
publishing.publications {
    withType(MavenPublication) {
        pom.withXml {
            var projectDependencyNodes = []
            asNode().depthFirst { node ->
                if (node.name().localPart == 'dependency' && node.get("groupId").text() == "com.palantir.gradle.jdks" && node.get("artifactId").text() == "gradle-jdks-root") {
                    projectDependencyNodes << node
                }
            }
            projectDependencyNodes.each { node ->
                node.parent().remove(node)
            }
        }
    }
}