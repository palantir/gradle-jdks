apply plugin: 'java'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'org.unbroken-dome.test-sets'

testSets {
    integrationTest
}

dependencies {
    // Avoid adding large compile dependencies here, as they will also be added in the gradle-jdks-setup-all*.jar using the fatJar task
    implementation gradleApi()
    implementation project(':gradle-jdks-setup-common')
    implementation 'net.bytebuddy:byte-buddy'
    implementation 'net.bytebuddy:byte-buddy-agent'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'commons-io:commons-io'
    testImplementation 'org.xmlunit:xmlunit-assertj'

    integrationTestImplementation project(':gradle-jdks')
    integrationTestImplementation 'commons-io:commons-io'
    integrationTestImplementation 'com.google.guava:guava'
    integrationTestImplementation 'org.junit.jupiter:junit-jupiter'
    integrationTestImplementation 'org.assertj:assertj-core'
}

tasks.register('fatJar', Jar) {
    dependsOn tasks.jar, ':gradle-jdks-setup-common:jar'
    manifest {
        attributes 'Main-Class': 'com.palantir.gradle.jdks.setup.IntelijGradleJdkSetup'
        attributes 'Premain-Class': 'com.palantir.gradle.jdks.setup.GradleAgent'
    }
    archiveBaseName = 'gradle-jdks-setup-all'
    duplicatesStrategy = DuplicatesStrategy.WARN
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(JavaCompile) {
    options.errorprone.disable 'PreferSafeLoggableExceptions', 'StringSplitter'

}

tasks.integrationTest {
    environment("PROJECT_VERSION", project.version)
    dependsOn tasks.build
}

tasks.build.dependsOn tasks.fatJar

// DO NOT UPDATE! This needs to be kept as low as possible, such that it is compatible with all the jdk versions the
// consumers would want to set up with the JDK auto-management workflow (used by ./gradle-jdks-setup.sh and GradleWrapperMain.java classes)
javaVersion {
    target = 11
    runtime = 11
}


