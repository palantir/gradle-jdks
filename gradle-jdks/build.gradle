apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.external-publish-gradle-plugin'
apply plugin: 'org.unbroken-dome.test-sets'

testSets {
    integTest
}

tasks.build.dependsOn tasks.integTest

dependencies {
    api project(':gradle-jdks-distributions')
    api project(':gradle-jdks-json')
    api project(':gradle-jdks-setup')

    implementation('com.palantir.baseline:gradle-baseline-java') {
        exclude group: 'com.diffplug.spotless', module: 'spotless-plugin-gradle'
    }
    implementation 'com.palantir.gradle.failure-reports:gradle-failure-reports-exceptions'
    implementation 'com.palantir.gradle.utils:lazily-configured-mapping'
    implementation 'com.google.guava:guava'
    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-compress'
    implementation 'org.ow2.asm:asm'

    compileOnly 'com.palantir.gradle.auto-parallelizable:auto-parallelizable-annotations'
    compileOnly 'org.immutables:value::annotations'
    annotationProcessor 'com.palantir.gradle.auto-parallelizable:auto-parallelizable'
    annotationProcessor 'org.immutables:value'

    testImplementation gradleTestKit()
    testImplementation project(':gradle-jdks-settings')
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
}

gradlePlugin {
    plugins {
        jdks {
            id = 'com.palantir.jdks'
            displayName = 'Palantir JDK Auto-provisioning Plugin'
            description = 'Auto-provisions specific versions of JDKs'
            implementationClass = 'com.palantir.gradle.jdks.JdksPlugin'
            tags.addAll("java", "jdks")
        }
        jdksIdea {
            id = 'com.palantir.jdks-idea'
            displayName = 'Palantir Gradle JDK Configuring IDEA'
            description = 'Plugin for configuring the IDEA Gradle JDK setup'
            implementationClass = 'com.palantir.gradle.jdks.PalantirGradleJdkIdeaPlugin'
            tags.addAll("java", "jdks", "idea")
        }
        palantirCa {
            id = 'com.palantir.jdks.palantir-ca'
            displayName = 'Palantir CA for gradle-jdks'
            description = 'Includes the Palantir CA from the system truststore'
            implementationClass = 'com.palantir.gradle.jdks.PalantirCaPlugin'
            tags.addAll("java", "jdks", "palantir ca")
        }
    }
    website = 'https://github.com/palantir/gradle-jdks'
    vcsUrl = 'https://github.com/palantir/gradle-jdks'
    description = 'Download specific JDKs versions automatically'
}

tasks.withType(JavaCompile).configureEach {
    it.options.errorprone.disable 'JavaxInjectOnAbstractMethod'
    it.options.errorprone.disable 'StrictUnusedVariable'
}

tasks.test {
    environment("PROJECT_VERSION", project.version)
    systemProperty 'ignoreDeprecations', 'true'
    dependsOn project(':gradle-jdks-settings').tasks.named('build')
}

tasks.withType(ProcessResources.class).configureEach {
    from(project(':gradle-jdks-setup').tasks.named('fatJar')) {
        rename { 'gradle-jdks-setup.jar' }
    }
}
