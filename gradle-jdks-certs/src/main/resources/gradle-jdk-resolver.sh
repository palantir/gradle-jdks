#!/bin/sh
#
# (c) Copyright 2024 Palantir Technologies Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle jdk set up script for POSIX generated by gradle-jdks.
#
#   This script does the following:
#   (1) Downloads the corresponding JDK distribution based on the majorVersion=`gradle/gradle-jdk-major-version.txt`
#     and the distribution_url=`gradle/jdks/${majorVersion}/${os}/${arch}/download_url.txt`
#   (2) Installs the distribution in `$HOME/.gradle/gradle-jdks/${local_path}` based on the
#     local_path=`gradle/jdks/${majorVersion}/${os}/${arch}/local_path.txt`
#   (3) Calls the java class `JdkSpecCertSetup` that will set up the certificates for the locally installed distribution
#   (4) Sets up the JAVA_HOME env variable to the currently installed JDK
#
#
#   Important for running:
#   This script requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var%suffix}», and «$( cmd )»;
#         * various built-in commands including «command» and «set».
#
##############################################################################

tmp_work_dir=$(mktemp -d)

die () {
    echo
    echo "$*"
    echo
    # TODO(crogoz): Cleaning up
    echo rm -rf "$tmp_work_dir"
    exit 1
} >&2

# OS specific support
case "$( uname )" in                          #(
  Linux* )          os_name="linux"  ;;       #(
  Darwin* )         os_name="macos"  ;;       #(
  * )               die "ERROR Unsupported OS: $( uname )" ;;
esac

if [ "$os_name" = "linux" ]; then
    if [ -f /etc/alpine-release ]; then
      os_name="alpine-linux"
    fi
fi

# Arch specific support, see: gradle-jdks:com.palantir.gradle.jdks.CurrentArch.java
case "$(uname -m)" in                         #(
  x86-64* )       arch_name="x86-64"  ;;      #(
  x64* )          arch_name="x86-64"  ;;      #(
  amd64* )        arch_name="x86-64"  ;;      #(
  arm64* )        arch_name="aarch64"  ;;     #(
  arm* )          arch_name="aarch64"  ;;     #(
  aarch64* )      arch_name="aarch64"  ;;     #(
  x86* )          arch_name="x86"  ;;         #(
  i686* )         arch_name="x86"  ;;         #(
  * )             die "ERROR Unsupported architecture: $( uname -m )" ;;
esac

read -r major_version < gradle/gradle-jdk-major-version.txt
read -r distribution_url < gradle/jdks/"$major_version"/$os_name/$arch_name/download-url.txt
read -r distribution_local_path < gradle/jdks/"$major_version"/$os_name/$arch_name/local-path.txt

regex_pattern="^([a-zA-Z0-9_-]+)-([0-9.]+)-([a-z0-9]+)$"

# Check if the input string matches the regex pattern
if echo "$distribution_local_path" | grep -q -E "$regex_pattern"; then
  name=$(echo "$distribution_local_path" | sed -n -E "s/$regex_pattern/\1/p")
  version=$(echo "$distribution_local_path" | sed -n -E "s/$regex_pattern/\2/p")
  hash=$(echo "$distribution_local_path" | sed -n -E "s/$regex_pattern/\3/p")
else
  die "ERROR: $distribution_local_path for gradle-jdk-major-version=$major_version and $(uname -m) is invalid, expected to match pattern: $regex_pattern"
fi

# Check if distribution exists in $HOME/.gradle/gradle-jdks
jdk_installation_directory=$HOME/.gradle/gradle-jdks/$name-$version-$hash
temp_java_tar=$tmp_work_dir/$name-$version.tar.gz
die "$distribution_url"
if [ -d "$jdk_installation_directory" ]; then
  echo "Distribution $distribution_url already exists in $HOME/.gradle/gradle-jdks, setting JAVA_HOME to $jdk_installation_directory"
else
  echo "Distribution $distribution_url does not exist, installing in temporary location $temp_java_tar"
  # Download and extract the distribution into a temporary directory
  if command -v curl > /dev/null 2>&1; then
    echo "Using curl to download $distribution_url"
    curl -k -C - -o "$temp_java_tar" "$distribution_url"
  else
    echo "Using wget to download $distribution_url"
    wget --no-check-certificate -c -O "$temp_java_tar" "$distribution_url"
  fi

  mkdir -p  "$tmp_work_dir/$name-$version-inprogress"
  tar -xf "$temp_java_tar" -C "$tmp_work_dir/$name-$version-inprogress"

  # Finding the java_home
  java_bin=$(find "$tmp_work_dir/$name-$version-inprogress" -type f -name "java" -path "*/bin/java" ! -type l)
  java_home="${java_bin%/*/*}"

  # Copying the java_home into the permanent location
  mkdir -p "$jdk_installation_directory"
  mv "$java_home/*" "$jdk_installation_directory"
  echo "Now java_distribution is installed in $jdk_installation_directory, setting JAVA_HOME to $jdk_installation_directory"

  # Setting up the jdk certificates
  "$jdk_installation_directory/bin/java" -cp gradle/jdks/gradle-jdk-certs.jar com.palantir.gradle.certs.JdkSpecCertSetup
  if [ $? -ne 0 ]; then
    die "ERROR: Failed to run the jdk certificate setup $?"
  fi
fi

# TODO(crogoz): set up the JAVA_HOME, running source ./script ?
# export JAVA_HOME="$jdk_installation_directory"